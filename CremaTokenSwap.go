// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CremaTokenSwap is the `cremaTokenSwap` instruction.
type CremaTokenSwap struct {
	InAmount         *uint64 `bin:"optional"`
	MinimumOutAmount *uint64
	PlatformFeeBps   *uint8

	// [0] = [] swapProgram
	//
	// [1] = [WRITE] pool
	//
	// [2] = [] poolSigner
	//
	// [3] = [WRITE] userSourceTokenAccount
	//
	// [4] = [WRITE] userDestinationTokenAccount
	//
	// [5] = [WRITE] poolSourceTokenAccount
	//
	// [6] = [WRITE] poolDestinationTokenAccount
	//
	// [7] = [WRITE] poolTicksAccount
	//
	// [8] = [SIGNER] walletAuthority
	//
	// [9] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCremaTokenSwapInstructionBuilder creates a new `CremaTokenSwap` instruction builder.
func NewCremaTokenSwapInstructionBuilder() *CremaTokenSwap {
	nd := &CremaTokenSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetInAmount sets the "inAmount" parameter.
func (inst *CremaTokenSwap) SetInAmount(inAmount uint64) *CremaTokenSwap {
	inst.InAmount = &inAmount
	return inst
}

// SetMinimumOutAmount sets the "minimumOutAmount" parameter.
func (inst *CremaTokenSwap) SetMinimumOutAmount(minimumOutAmount uint64) *CremaTokenSwap {
	inst.MinimumOutAmount = &minimumOutAmount
	return inst
}

// SetPlatformFeeBps sets the "platformFeeBps" parameter.
func (inst *CremaTokenSwap) SetPlatformFeeBps(platformFeeBps uint8) *CremaTokenSwap {
	inst.PlatformFeeBps = &platformFeeBps
	return inst
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *CremaTokenSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *CremaTokenSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *CremaTokenSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolAccount sets the "pool" account.
func (inst *CremaTokenSwap) SetPoolAccount(pool ag_solanago.PublicKey) *CremaTokenSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *CremaTokenSwap) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolSignerAccount sets the "poolSigner" account.
func (inst *CremaTokenSwap) SetPoolSignerAccount(poolSigner ag_solanago.PublicKey) *CremaTokenSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolSigner)
	return inst
}

// GetPoolSignerAccount gets the "poolSigner" account.
func (inst *CremaTokenSwap) GetPoolSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserSourceTokenAccount sets the "userSourceTokenAccount" account.
func (inst *CremaTokenSwap) SetUserSourceTokenAccount(userSourceTokenAccount ag_solanago.PublicKey) *CremaTokenSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userSourceTokenAccount).WRITE()
	return inst
}

// GetUserSourceTokenAccount gets the "userSourceTokenAccount" account.
func (inst *CremaTokenSwap) GetUserSourceTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserDestinationTokenAccount sets the "userDestinationTokenAccount" account.
func (inst *CremaTokenSwap) SetUserDestinationTokenAccount(userDestinationTokenAccount ag_solanago.PublicKey) *CremaTokenSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userDestinationTokenAccount).WRITE()
	return inst
}

// GetUserDestinationTokenAccount gets the "userDestinationTokenAccount" account.
func (inst *CremaTokenSwap) GetUserDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolSourceTokenAccount sets the "poolSourceTokenAccount" account.
func (inst *CremaTokenSwap) SetPoolSourceTokenAccount(poolSourceTokenAccount ag_solanago.PublicKey) *CremaTokenSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolSourceTokenAccount).WRITE()
	return inst
}

// GetPoolSourceTokenAccount gets the "poolSourceTokenAccount" account.
func (inst *CremaTokenSwap) GetPoolSourceTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolDestinationTokenAccount sets the "poolDestinationTokenAccount" account.
func (inst *CremaTokenSwap) SetPoolDestinationTokenAccount(poolDestinationTokenAccount ag_solanago.PublicKey) *CremaTokenSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolDestinationTokenAccount).WRITE()
	return inst
}

// GetPoolDestinationTokenAccount gets the "poolDestinationTokenAccount" account.
func (inst *CremaTokenSwap) GetPoolDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPoolTicksAccount sets the "poolTicksAccount" account.
func (inst *CremaTokenSwap) SetPoolTicksAccount(poolTicksAccount ag_solanago.PublicKey) *CremaTokenSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolTicksAccount).WRITE()
	return inst
}

// GetPoolTicksAccount gets the "poolTicksAccount" account.
func (inst *CremaTokenSwap) GetPoolTicksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetWalletAuthorityAccount sets the "walletAuthority" account.
func (inst *CremaTokenSwap) SetWalletAuthorityAccount(walletAuthority ag_solanago.PublicKey) *CremaTokenSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(walletAuthority).SIGNER()
	return inst
}

// GetWalletAuthorityAccount gets the "walletAuthority" account.
func (inst *CremaTokenSwap) GetWalletAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CremaTokenSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CremaTokenSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CremaTokenSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst CremaTokenSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CremaTokenSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CremaTokenSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CremaTokenSwap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinimumOutAmount == nil {
			return errors.New("MinimumOutAmount parameter is not set")
		}
		if inst.PlatformFeeBps == nil {
			return errors.New("PlatformFeeBps parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolSigner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserDestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolDestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolTicksAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.WalletAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CremaTokenSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CremaTokenSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        InAmount (OPT)", inst.InAmount))
						paramsBranch.Child(ag_format.Param("MinimumOutAmount", *inst.MinimumOutAmount))
						paramsBranch.Child(ag_format.Param("  PlatformFeeBps", *inst.PlatformFeeBps))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                pool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          poolSigner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     userSourceToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("userDestinationToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     poolSourceToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("poolDestinationToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           poolTicks", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("     walletAuthority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj CremaTokenSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InAmount` param (optional):
	{
		if obj.InAmount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.InAmount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinimumOutAmount` param:
	err = encoder.Encode(obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeBps` param:
	err = encoder.Encode(obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CremaTokenSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InAmount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.InAmount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinimumOutAmount`:
	err = decoder.Decode(&obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeBps`:
	err = decoder.Decode(&obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}

// NewCremaTokenSwapInstruction declares a new CremaTokenSwap instruction with the provided parameters and accounts.
func NewCremaTokenSwapInstruction(
	// Parameters:
	inAmount uint64,
	minimumOutAmount uint64,
	platformFeeBps uint8,
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	poolSigner ag_solanago.PublicKey,
	userSourceTokenAccount ag_solanago.PublicKey,
	userDestinationTokenAccount ag_solanago.PublicKey,
	poolSourceTokenAccount ag_solanago.PublicKey,
	poolDestinationTokenAccount ag_solanago.PublicKey,
	poolTicksAccount ag_solanago.PublicKey,
	walletAuthority ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CremaTokenSwap {
	return NewCremaTokenSwapInstructionBuilder().
		SetInAmount(inAmount).
		SetMinimumOutAmount(minimumOutAmount).
		SetPlatformFeeBps(platformFeeBps).
		SetSwapProgramAccount(swapProgram).
		SetPoolAccount(pool).
		SetPoolSignerAccount(poolSigner).
		SetUserSourceTokenAccount(userSourceTokenAccount).
		SetUserDestinationTokenAccount(userDestinationTokenAccount).
		SetPoolSourceTokenAccount(poolSourceTokenAccount).
		SetPoolDestinationTokenAccount(poolDestinationTokenAccount).
		SetPoolTicksAccount(poolTicksAccount).
		SetWalletAuthorityAccount(walletAuthority).
		SetTokenProgramAccount(tokenProgram)
}
