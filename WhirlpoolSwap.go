// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WhirlpoolSwap is the `whirlpoolSwap` instruction.
type WhirlpoolSwap struct {
	InAmount         *uint64 `bin:"optional"`
	MinimumOutAmount *uint64
	AToB             *bool
	PlatformFeeBps   *uint8

	// [0] = [] swapProgram
	//
	// [1] = [] tokenProgram
	//
	// [2] = [SIGNER] tokenAuthority
	//
	// [3] = [WRITE] whirlpool
	//
	// [4] = [WRITE] tokenOwnerAccountA
	//
	// [5] = [WRITE] tokenVaultA
	//
	// [6] = [WRITE] tokenOwnerAccountB
	//
	// [7] = [WRITE] tokenVaultB
	//
	// [8] = [WRITE] tickArray0
	//
	// [9] = [WRITE] tickArray1
	//
	// [10] = [WRITE] tickArray2
	//
	// [11] = [] oracle
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWhirlpoolSwapInstructionBuilder creates a new `WhirlpoolSwap` instruction builder.
func NewWhirlpoolSwapInstructionBuilder() *WhirlpoolSwap {
	nd := &WhirlpoolSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetInAmount sets the "inAmount" parameter.
func (inst *WhirlpoolSwap) SetInAmount(inAmount uint64) *WhirlpoolSwap {
	inst.InAmount = &inAmount
	return inst
}

// SetMinimumOutAmount sets the "minimumOutAmount" parameter.
func (inst *WhirlpoolSwap) SetMinimumOutAmount(minimumOutAmount uint64) *WhirlpoolSwap {
	inst.MinimumOutAmount = &minimumOutAmount
	return inst
}

// SetAToB sets the "aToB" parameter.
func (inst *WhirlpoolSwap) SetAToB(aToB bool) *WhirlpoolSwap {
	inst.AToB = &aToB
	return inst
}

// SetPlatformFeeBps sets the "platformFeeBps" parameter.
func (inst *WhirlpoolSwap) SetPlatformFeeBps(platformFeeBps uint8) *WhirlpoolSwap {
	inst.PlatformFeeBps = &platformFeeBps
	return inst
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *WhirlpoolSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *WhirlpoolSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *WhirlpoolSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *WhirlpoolSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAuthorityAccount sets the "tokenAuthority" account.
func (inst *WhirlpoolSwap) SetTokenAuthorityAccount(tokenAuthority ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAuthority).SIGNER()
	return inst
}

// GetTokenAuthorityAccount gets the "tokenAuthority" account.
func (inst *WhirlpoolSwap) GetTokenAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *WhirlpoolSwap) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *WhirlpoolSwap) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenOwnerAccountAAccount sets the "tokenOwnerAccountA" account.
func (inst *WhirlpoolSwap) SetTokenOwnerAccountAAccount(tokenOwnerAccountA ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenOwnerAccountA).WRITE()
	return inst
}

// GetTokenOwnerAccountAAccount gets the "tokenOwnerAccountA" account.
func (inst *WhirlpoolSwap) GetTokenOwnerAccountAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenVaultAAccount sets the "tokenVaultA" account.
func (inst *WhirlpoolSwap) SetTokenVaultAAccount(tokenVaultA ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenVaultA).WRITE()
	return inst
}

// GetTokenVaultAAccount gets the "tokenVaultA" account.
func (inst *WhirlpoolSwap) GetTokenVaultAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenOwnerAccountBAccount sets the "tokenOwnerAccountB" account.
func (inst *WhirlpoolSwap) SetTokenOwnerAccountBAccount(tokenOwnerAccountB ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenOwnerAccountB).WRITE()
	return inst
}

// GetTokenOwnerAccountBAccount gets the "tokenOwnerAccountB" account.
func (inst *WhirlpoolSwap) GetTokenOwnerAccountBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenVaultBAccount sets the "tokenVaultB" account.
func (inst *WhirlpoolSwap) SetTokenVaultBAccount(tokenVaultB ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenVaultB).WRITE()
	return inst
}

// GetTokenVaultBAccount gets the "tokenVaultB" account.
func (inst *WhirlpoolSwap) GetTokenVaultBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTickArray0Account sets the "tickArray0" account.
func (inst *WhirlpoolSwap) SetTickArray0Account(tickArray0 ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tickArray0).WRITE()
	return inst
}

// GetTickArray0Account gets the "tickArray0" account.
func (inst *WhirlpoolSwap) GetTickArray0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTickArray1Account sets the "tickArray1" account.
func (inst *WhirlpoolSwap) SetTickArray1Account(tickArray1 ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tickArray1).WRITE()
	return inst
}

// GetTickArray1Account gets the "tickArray1" account.
func (inst *WhirlpoolSwap) GetTickArray1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTickArray2Account sets the "tickArray2" account.
func (inst *WhirlpoolSwap) SetTickArray2Account(tickArray2 ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tickArray2).WRITE()
	return inst
}

// GetTickArray2Account gets the "tickArray2" account.
func (inst *WhirlpoolSwap) GetTickArray2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetOracleAccount sets the "oracle" account.
func (inst *WhirlpoolSwap) SetOracleAccount(oracle ag_solanago.PublicKey) *WhirlpoolSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *WhirlpoolSwap) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst WhirlpoolSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WhirlpoolSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WhirlpoolSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WhirlpoolSwap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinimumOutAmount == nil {
			return errors.New("MinimumOutAmount parameter is not set")
		}
		if inst.AToB == nil {
			return errors.New("AToB parameter is not set")
		}
		if inst.PlatformFeeBps == nil {
			return errors.New("PlatformFeeBps parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenOwnerAccountA is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenVaultA is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenOwnerAccountB is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenVaultB is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TickArray0 is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TickArray1 is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TickArray2 is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Oracle is not set")
		}
	}
	return nil
}

func (inst *WhirlpoolSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WhirlpoolSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        InAmount (OPT)", inst.InAmount))
						paramsBranch.Child(ag_format.Param("MinimumOutAmount", *inst.MinimumOutAmount))
						paramsBranch.Child(ag_format.Param("            AToB", *inst.AToB))
						paramsBranch.Child(ag_format.Param("  PlatformFeeBps", *inst.PlatformFeeBps))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      tokenProgram", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    tokenAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         whirlpool", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("tokenOwnerAccountA", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       tokenVaultA", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("tokenOwnerAccountB", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       tokenVaultB", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        tickArray0", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        tickArray1", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("        tickArray2", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("            oracle", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj WhirlpoolSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InAmount` param (optional):
	{
		if obj.InAmount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.InAmount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinimumOutAmount` param:
	err = encoder.Encode(obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Serialize `AToB` param:
	err = encoder.Encode(obj.AToB)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeBps` param:
	err = encoder.Encode(obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WhirlpoolSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InAmount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.InAmount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinimumOutAmount`:
	err = decoder.Decode(&obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `AToB`:
	err = decoder.Decode(&obj.AToB)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeBps`:
	err = decoder.Decode(&obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}

// NewWhirlpoolSwapInstruction declares a new WhirlpoolSwap instruction with the provided parameters and accounts.
func NewWhirlpoolSwapInstruction(
	// Parameters:
	inAmount uint64,
	minimumOutAmount uint64,
	aToB bool,
	platformFeeBps uint8,
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenAuthority ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	tokenOwnerAccountA ag_solanago.PublicKey,
	tokenVaultA ag_solanago.PublicKey,
	tokenOwnerAccountB ag_solanago.PublicKey,
	tokenVaultB ag_solanago.PublicKey,
	tickArray0 ag_solanago.PublicKey,
	tickArray1 ag_solanago.PublicKey,
	tickArray2 ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey) *WhirlpoolSwap {
	return NewWhirlpoolSwapInstructionBuilder().
		SetInAmount(inAmount).
		SetMinimumOutAmount(minimumOutAmount).
		SetAToB(aToB).
		SetPlatformFeeBps(platformFeeBps).
		SetSwapProgramAccount(swapProgram).
		SetTokenProgramAccount(tokenProgram).
		SetTokenAuthorityAccount(tokenAuthority).
		SetWhirlpoolAccount(whirlpool).
		SetTokenOwnerAccountAAccount(tokenOwnerAccountA).
		SetTokenVaultAAccount(tokenVaultA).
		SetTokenOwnerAccountBAccount(tokenOwnerAccountB).
		SetTokenVaultBAccount(tokenVaultB).
		SetTickArray0Account(tickArray0).
		SetTickArray1Account(tickArray1).
		SetTickArray2Account(tickArray2).
		SetOracleAccount(oracle)
}
