// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CykuraSwap is the `cykuraSwap` instruction.
type CykuraSwap struct {
	InAmount         *uint64 `bin:"optional"`
	MinimumOutAmount *uint64
	PlatformFeeBps   *uint8

	// [0] = [] swapProgram
	//
	// [1] = [SIGNER] signer
	//
	// [2] = [] factoryState
	//
	// [3] = [WRITE] poolState
	//
	// [4] = [WRITE] inputTokenAccount
	//
	// [5] = [WRITE] outputTokenAccount
	//
	// [6] = [WRITE] inputVault
	//
	// [7] = [WRITE] outputVault
	//
	// [8] = [WRITE] lastObservationState
	//
	// [9] = [] coreProgram
	//
	// [10] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCykuraSwapInstructionBuilder creates a new `CykuraSwap` instruction builder.
func NewCykuraSwapInstructionBuilder() *CykuraSwap {
	nd := &CykuraSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetInAmount sets the "inAmount" parameter.
func (inst *CykuraSwap) SetInAmount(inAmount uint64) *CykuraSwap {
	inst.InAmount = &inAmount
	return inst
}

// SetMinimumOutAmount sets the "minimumOutAmount" parameter.
func (inst *CykuraSwap) SetMinimumOutAmount(minimumOutAmount uint64) *CykuraSwap {
	inst.MinimumOutAmount = &minimumOutAmount
	return inst
}

// SetPlatformFeeBps sets the "platformFeeBps" parameter.
func (inst *CykuraSwap) SetPlatformFeeBps(platformFeeBps uint8) *CykuraSwap {
	inst.PlatformFeeBps = &platformFeeBps
	return inst
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *CykuraSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *CykuraSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSignerAccount sets the "signer" account.
func (inst *CykuraSwap) SetSignerAccount(signer ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(signer).SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *CykuraSwap) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFactoryStateAccount sets the "factoryState" account.
func (inst *CykuraSwap) SetFactoryStateAccount(factoryState ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(factoryState)
	return inst
}

// GetFactoryStateAccount gets the "factoryState" account.
func (inst *CykuraSwap) GetFactoryStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolStateAccount sets the "poolState" account.
func (inst *CykuraSwap) SetPoolStateAccount(poolState ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "poolState" account.
func (inst *CykuraSwap) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetInputTokenAccount sets the "inputTokenAccount" account.
func (inst *CykuraSwap) SetInputTokenAccount(inputTokenAccount ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(inputTokenAccount).WRITE()
	return inst
}

// GetInputTokenAccount gets the "inputTokenAccount" account.
func (inst *CykuraSwap) GetInputTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOutputTokenAccount sets the "outputTokenAccount" account.
func (inst *CykuraSwap) SetOutputTokenAccount(outputTokenAccount ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(outputTokenAccount).WRITE()
	return inst
}

// GetOutputTokenAccount gets the "outputTokenAccount" account.
func (inst *CykuraSwap) GetOutputTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetInputVaultAccount sets the "inputVault" account.
func (inst *CykuraSwap) SetInputVaultAccount(inputVault ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(inputVault).WRITE()
	return inst
}

// GetInputVaultAccount gets the "inputVault" account.
func (inst *CykuraSwap) GetInputVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetOutputVaultAccount sets the "outputVault" account.
func (inst *CykuraSwap) SetOutputVaultAccount(outputVault ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(outputVault).WRITE()
	return inst
}

// GetOutputVaultAccount gets the "outputVault" account.
func (inst *CykuraSwap) GetOutputVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetLastObservationStateAccount sets the "lastObservationState" account.
func (inst *CykuraSwap) SetLastObservationStateAccount(lastObservationState ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(lastObservationState).WRITE()
	return inst
}

// GetLastObservationStateAccount gets the "lastObservationState" account.
func (inst *CykuraSwap) GetLastObservationStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetCoreProgramAccount sets the "coreProgram" account.
func (inst *CykuraSwap) SetCoreProgramAccount(coreProgram ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(coreProgram)
	return inst
}

// GetCoreProgramAccount gets the "coreProgram" account.
func (inst *CykuraSwap) GetCoreProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CykuraSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CykuraSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CykuraSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst CykuraSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CykuraSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CykuraSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CykuraSwap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinimumOutAmount == nil {
			return errors.New("MinimumOutAmount parameter is not set")
		}
		if inst.PlatformFeeBps == nil {
			return errors.New("PlatformFeeBps parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FactoryState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.InputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.OutputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.InputVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.OutputVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.LastObservationState is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CoreProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CykuraSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CykuraSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        InAmount (OPT)", inst.InAmount))
						paramsBranch.Child(ag_format.Param("MinimumOutAmount", *inst.MinimumOutAmount))
						paramsBranch.Child(ag_format.Param("  PlatformFeeBps", *inst.PlatformFeeBps))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              signer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        factoryState", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           poolState", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          inputToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         outputToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          inputVault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         outputVault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("lastObservationState", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         coreProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj CykuraSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InAmount` param (optional):
	{
		if obj.InAmount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.InAmount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinimumOutAmount` param:
	err = encoder.Encode(obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeBps` param:
	err = encoder.Encode(obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CykuraSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InAmount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.InAmount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinimumOutAmount`:
	err = decoder.Decode(&obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeBps`:
	err = decoder.Decode(&obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}

// NewCykuraSwapInstruction declares a new CykuraSwap instruction with the provided parameters and accounts.
func NewCykuraSwapInstruction(
	// Parameters:
	inAmount uint64,
	minimumOutAmount uint64,
	platformFeeBps uint8,
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	signer ag_solanago.PublicKey,
	factoryState ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	outputTokenAccount ag_solanago.PublicKey,
	inputVault ag_solanago.PublicKey,
	outputVault ag_solanago.PublicKey,
	lastObservationState ag_solanago.PublicKey,
	coreProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CykuraSwap {
	return NewCykuraSwapInstructionBuilder().
		SetInAmount(inAmount).
		SetMinimumOutAmount(minimumOutAmount).
		SetPlatformFeeBps(platformFeeBps).
		SetSwapProgramAccount(swapProgram).
		SetSignerAccount(signer).
		SetFactoryStateAccount(factoryState).
		SetPoolStateAccount(poolState).
		SetInputTokenAccount(inputTokenAccount).
		SetOutputTokenAccount(outputTokenAccount).
		SetInputVaultAccount(inputVault).
		SetOutputVaultAccount(outputVault).
		SetLastObservationStateAccount(lastObservationState).
		SetCoreProgramAccount(coreProgram).
		SetTokenProgramAccount(tokenProgram)
}
