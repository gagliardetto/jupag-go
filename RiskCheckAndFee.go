// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RiskCheckAndFee is the `riskCheckAndFee` instruction.
type RiskCheckAndFee struct {
	MinimumOutAmount *uint64
	PlatformFeeBps   *uint8

	// [0] = [WRITE] tokenLedger
	//
	// [1] = [WRITE] userDestinationTokenAccount
	//
	// [2] = [SIGNER] userTransferAuthority
	//
	// [3] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRiskCheckAndFeeInstructionBuilder creates a new `RiskCheckAndFee` instruction builder.
func NewRiskCheckAndFeeInstructionBuilder() *RiskCheckAndFee {
	nd := &RiskCheckAndFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetMinimumOutAmount sets the "minimumOutAmount" parameter.
func (inst *RiskCheckAndFee) SetMinimumOutAmount(minimumOutAmount uint64) *RiskCheckAndFee {
	inst.MinimumOutAmount = &minimumOutAmount
	return inst
}

// SetPlatformFeeBps sets the "platformFeeBps" parameter.
func (inst *RiskCheckAndFee) SetPlatformFeeBps(platformFeeBps uint8) *RiskCheckAndFee {
	inst.PlatformFeeBps = &platformFeeBps
	return inst
}

// SetTokenLedgerAccount sets the "tokenLedger" account.
func (inst *RiskCheckAndFee) SetTokenLedgerAccount(tokenLedger ag_solanago.PublicKey) *RiskCheckAndFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenLedger).WRITE()
	return inst
}

// GetTokenLedgerAccount gets the "tokenLedger" account.
func (inst *RiskCheckAndFee) GetTokenLedgerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserDestinationTokenAccount sets the "userDestinationTokenAccount" account.
func (inst *RiskCheckAndFee) SetUserDestinationTokenAccount(userDestinationTokenAccount ag_solanago.PublicKey) *RiskCheckAndFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(userDestinationTokenAccount).WRITE()
	return inst
}

// GetUserDestinationTokenAccount gets the "userDestinationTokenAccount" account.
func (inst *RiskCheckAndFee) GetUserDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserTransferAuthorityAccount sets the "userTransferAuthority" account.
func (inst *RiskCheckAndFee) SetUserTransferAuthorityAccount(userTransferAuthority ag_solanago.PublicKey) *RiskCheckAndFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userTransferAuthority).SIGNER()
	return inst
}

// GetUserTransferAuthorityAccount gets the "userTransferAuthority" account.
func (inst *RiskCheckAndFee) GetUserTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RiskCheckAndFee) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RiskCheckAndFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RiskCheckAndFee) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst RiskCheckAndFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RiskCheckAndFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RiskCheckAndFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RiskCheckAndFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinimumOutAmount == nil {
			return errors.New("MinimumOutAmount parameter is not set")
		}
		if inst.PlatformFeeBps == nil {
			return errors.New("PlatformFeeBps parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenLedger is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UserDestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *RiskCheckAndFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RiskCheckAndFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MinimumOutAmount", *inst.MinimumOutAmount))
						paramsBranch.Child(ag_format.Param("  PlatformFeeBps", *inst.PlatformFeeBps))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          tokenLedger", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" userDestinationToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("userTransferAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         tokenProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj RiskCheckAndFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinimumOutAmount` param:
	err = encoder.Encode(obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeBps` param:
	err = encoder.Encode(obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RiskCheckAndFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinimumOutAmount`:
	err = decoder.Decode(&obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeBps`:
	err = decoder.Decode(&obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}

// NewRiskCheckAndFeeInstruction declares a new RiskCheckAndFee instruction with the provided parameters and accounts.
func NewRiskCheckAndFeeInstruction(
	// Parameters:
	minimumOutAmount uint64,
	platformFeeBps uint8,
	// Accounts:
	tokenLedger ag_solanago.PublicKey,
	userDestinationTokenAccount ag_solanago.PublicKey,
	userTransferAuthority ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *RiskCheckAndFee {
	return NewRiskCheckAndFeeInstructionBuilder().
		SetMinimumOutAmount(minimumOutAmount).
		SetPlatformFeeBps(platformFeeBps).
		SetTokenLedgerAccount(tokenLedger).
		SetUserDestinationTokenAccount(userDestinationTokenAccount).
		SetUserTransferAuthorityAccount(userTransferAuthority).
		SetTokenProgramAccount(tokenProgram)
}
