// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AldrinSwap is the `aldrinSwap` instruction.
type AldrinSwap struct {
	InAmount         *uint64 `bin:"optional"`
	MinimumOutAmount *uint64
	Side             *Side
	PlatformFeeBps   *uint8

	// [0] = [] swapProgram
	//
	// [1] = [] pool
	//
	// [2] = [] poolSigner
	//
	// [3] = [WRITE] poolMint
	//
	// [4] = [WRITE] baseTokenVault
	//
	// [5] = [WRITE] quoteTokenVault
	//
	// [6] = [WRITE] feePoolTokenAccount
	//
	// [7] = [SIGNER] walletAuthority
	//
	// [8] = [WRITE] userBaseTokenAccount
	//
	// [9] = [WRITE] userQuoteTokenAccount
	//
	// [10] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAldrinSwapInstructionBuilder creates a new `AldrinSwap` instruction builder.
func NewAldrinSwapInstructionBuilder() *AldrinSwap {
	nd := &AldrinSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetInAmount sets the "inAmount" parameter.
func (inst *AldrinSwap) SetInAmount(inAmount uint64) *AldrinSwap {
	inst.InAmount = &inAmount
	return inst
}

// SetMinimumOutAmount sets the "minimumOutAmount" parameter.
func (inst *AldrinSwap) SetMinimumOutAmount(minimumOutAmount uint64) *AldrinSwap {
	inst.MinimumOutAmount = &minimumOutAmount
	return inst
}

// SetSide sets the "side" parameter.
func (inst *AldrinSwap) SetSide(side Side) *AldrinSwap {
	inst.Side = &side
	return inst
}

// SetPlatformFeeBps sets the "platformFeeBps" parameter.
func (inst *AldrinSwap) SetPlatformFeeBps(platformFeeBps uint8) *AldrinSwap {
	inst.PlatformFeeBps = &platformFeeBps
	return inst
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *AldrinSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *AldrinSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolAccount sets the "pool" account.
func (inst *AldrinSwap) SetPoolAccount(pool ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pool)
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *AldrinSwap) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolSignerAccount sets the "poolSigner" account.
func (inst *AldrinSwap) SetPoolSignerAccount(poolSigner ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolSigner)
	return inst
}

// GetPoolSignerAccount gets the "poolSigner" account.
func (inst *AldrinSwap) GetPoolSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolMintAccount sets the "poolMint" account.
func (inst *AldrinSwap) SetPoolMintAccount(poolMint ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolMint).WRITE()
	return inst
}

// GetPoolMintAccount gets the "poolMint" account.
func (inst *AldrinSwap) GetPoolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBaseTokenVaultAccount sets the "baseTokenVault" account.
func (inst *AldrinSwap) SetBaseTokenVaultAccount(baseTokenVault ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(baseTokenVault).WRITE()
	return inst
}

// GetBaseTokenVaultAccount gets the "baseTokenVault" account.
func (inst *AldrinSwap) GetBaseTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetQuoteTokenVaultAccount sets the "quoteTokenVault" account.
func (inst *AldrinSwap) SetQuoteTokenVaultAccount(quoteTokenVault ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(quoteTokenVault).WRITE()
	return inst
}

// GetQuoteTokenVaultAccount gets the "quoteTokenVault" account.
func (inst *AldrinSwap) GetQuoteTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetFeePoolTokenAccount sets the "feePoolTokenAccount" account.
func (inst *AldrinSwap) SetFeePoolTokenAccount(feePoolTokenAccount ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(feePoolTokenAccount).WRITE()
	return inst
}

// GetFeePoolTokenAccount gets the "feePoolTokenAccount" account.
func (inst *AldrinSwap) GetFeePoolTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetWalletAuthorityAccount sets the "walletAuthority" account.
func (inst *AldrinSwap) SetWalletAuthorityAccount(walletAuthority ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(walletAuthority).SIGNER()
	return inst
}

// GetWalletAuthorityAccount gets the "walletAuthority" account.
func (inst *AldrinSwap) GetWalletAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetUserBaseTokenAccount sets the "userBaseTokenAccount" account.
func (inst *AldrinSwap) SetUserBaseTokenAccount(userBaseTokenAccount ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(userBaseTokenAccount).WRITE()
	return inst
}

// GetUserBaseTokenAccount gets the "userBaseTokenAccount" account.
func (inst *AldrinSwap) GetUserBaseTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetUserQuoteTokenAccount sets the "userQuoteTokenAccount" account.
func (inst *AldrinSwap) SetUserQuoteTokenAccount(userQuoteTokenAccount ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(userQuoteTokenAccount).WRITE()
	return inst
}

// GetUserQuoteTokenAccount gets the "userQuoteTokenAccount" account.
func (inst *AldrinSwap) GetUserQuoteTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *AldrinSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AldrinSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *AldrinSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst AldrinSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AldrinSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AldrinSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AldrinSwap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinimumOutAmount == nil {
			return errors.New("MinimumOutAmount parameter is not set")
		}
		if inst.Side == nil {
			return errors.New("Side parameter is not set")
		}
		if inst.PlatformFeeBps == nil {
			return errors.New("PlatformFeeBps parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolSigner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BaseTokenVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.QuoteTokenVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.FeePoolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.WalletAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.UserBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.UserQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *AldrinSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AldrinSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        InAmount (OPT)", inst.InAmount))
						paramsBranch.Child(ag_format.Param("MinimumOutAmount", *inst.MinimumOutAmount))
						paramsBranch.Child(ag_format.Param("            Side", *inst.Side))
						paramsBranch.Child(ag_format.Param("  PlatformFeeBps", *inst.PlatformFeeBps))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     poolSigner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       poolMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" baseTokenVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("quoteTokenVault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   feePoolToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("walletAuthority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("  userBaseToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta(" userQuoteToken", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("   tokenProgram", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj AldrinSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InAmount` param (optional):
	{
		if obj.InAmount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.InAmount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinimumOutAmount` param:
	err = encoder.Encode(obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeBps` param:
	err = encoder.Encode(obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AldrinSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InAmount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.InAmount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinimumOutAmount`:
	err = decoder.Decode(&obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeBps`:
	err = decoder.Decode(&obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}

// NewAldrinSwapInstruction declares a new AldrinSwap instruction with the provided parameters and accounts.
func NewAldrinSwapInstruction(
	// Parameters:
	inAmount uint64,
	minimumOutAmount uint64,
	side Side,
	platformFeeBps uint8,
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	poolSigner ag_solanago.PublicKey,
	poolMint ag_solanago.PublicKey,
	baseTokenVault ag_solanago.PublicKey,
	quoteTokenVault ag_solanago.PublicKey,
	feePoolTokenAccount ag_solanago.PublicKey,
	walletAuthority ag_solanago.PublicKey,
	userBaseTokenAccount ag_solanago.PublicKey,
	userQuoteTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *AldrinSwap {
	return NewAldrinSwapInstructionBuilder().
		SetInAmount(inAmount).
		SetMinimumOutAmount(minimumOutAmount).
		SetSide(side).
		SetPlatformFeeBps(platformFeeBps).
		SetSwapProgramAccount(swapProgram).
		SetPoolAccount(pool).
		SetPoolSignerAccount(poolSigner).
		SetPoolMintAccount(poolMint).
		SetBaseTokenVaultAccount(baseTokenVault).
		SetQuoteTokenVaultAccount(quoteTokenVault).
		SetFeePoolTokenAccount(feePoolTokenAccount).
		SetWalletAuthorityAccount(walletAuthority).
		SetUserBaseTokenAccount(userBaseTokenAccount).
		SetUserQuoteTokenAccount(userQuoteTokenAccount).
		SetTokenProgramAccount(tokenProgram)
}
