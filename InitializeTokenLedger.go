// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeTokenLedger is the `initializeTokenLedger` instruction.
type InitializeTokenLedger struct {

	// [0] = [WRITE, SIGNER] tokenLedger
	//
	// [1] = [WRITE, SIGNER] payer
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeTokenLedgerInstructionBuilder creates a new `InitializeTokenLedger` instruction builder.
func NewInitializeTokenLedgerInstructionBuilder() *InitializeTokenLedger {
	nd := &InitializeTokenLedger{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetTokenLedgerAccount sets the "tokenLedger" account.
func (inst *InitializeTokenLedger) SetTokenLedgerAccount(tokenLedger ag_solanago.PublicKey) *InitializeTokenLedger {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenLedger).WRITE().SIGNER()
	return inst
}

// GetTokenLedgerAccount gets the "tokenLedger" account.
func (inst *InitializeTokenLedger) GetTokenLedgerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
func (inst *InitializeTokenLedger) SetPayerAccount(payer ag_solanago.PublicKey) *InitializeTokenLedger {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *InitializeTokenLedger) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeTokenLedger) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeTokenLedger {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeTokenLedger) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst InitializeTokenLedger) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeTokenLedger,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeTokenLedger) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeTokenLedger) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenLedger is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeTokenLedger) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeTokenLedger")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  tokenLedger", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj InitializeTokenLedger) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *InitializeTokenLedger) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewInitializeTokenLedgerInstruction declares a new InitializeTokenLedger instruction with the provided parameters and accounts.
func NewInitializeTokenLedgerInstruction(
	// Accounts:
	tokenLedger ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeTokenLedger {
	return NewInitializeTokenLedgerInstructionBuilder().
		SetTokenLedgerAccount(tokenLedger).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
