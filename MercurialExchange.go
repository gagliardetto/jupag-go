// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MercurialExchange is the `mercurialExchange` instruction.
type MercurialExchange struct {
	InAmount         *uint64 `bin:"optional"`
	MinimumOutAmount *uint64
	PlatformFeeBps   *uint8

	// [0] = [] swapProgram
	//
	// [1] = [] swapState
	//
	// [2] = [] tokenProgram
	//
	// [3] = [] poolAuthority
	//
	// [4] = [SIGNER] userTransferAuthority
	//
	// [5] = [WRITE] sourceTokenAccount
	//
	// [6] = [WRITE] destinationTokenAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMercurialExchangeInstructionBuilder creates a new `MercurialExchange` instruction builder.
func NewMercurialExchangeInstructionBuilder() *MercurialExchange {
	nd := &MercurialExchange{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetInAmount sets the "inAmount" parameter.
func (inst *MercurialExchange) SetInAmount(inAmount uint64) *MercurialExchange {
	inst.InAmount = &inAmount
	return inst
}

// SetMinimumOutAmount sets the "minimumOutAmount" parameter.
func (inst *MercurialExchange) SetMinimumOutAmount(minimumOutAmount uint64) *MercurialExchange {
	inst.MinimumOutAmount = &minimumOutAmount
	return inst
}

// SetPlatformFeeBps sets the "platformFeeBps" parameter.
func (inst *MercurialExchange) SetPlatformFeeBps(platformFeeBps uint8) *MercurialExchange {
	inst.PlatformFeeBps = &platformFeeBps
	return inst
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *MercurialExchange) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *MercurialExchange {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *MercurialExchange) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSwapStateAccount sets the "swapState" account.
func (inst *MercurialExchange) SetSwapStateAccount(swapState ag_solanago.PublicKey) *MercurialExchange {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(swapState)
	return inst
}

// GetSwapStateAccount gets the "swapState" account.
func (inst *MercurialExchange) GetSwapStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MercurialExchange) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MercurialExchange {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MercurialExchange) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolAuthorityAccount sets the "poolAuthority" account.
func (inst *MercurialExchange) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *MercurialExchange {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "poolAuthority" account.
func (inst *MercurialExchange) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserTransferAuthorityAccount sets the "userTransferAuthority" account.
func (inst *MercurialExchange) SetUserTransferAuthorityAccount(userTransferAuthority ag_solanago.PublicKey) *MercurialExchange {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userTransferAuthority).SIGNER()
	return inst
}

// GetUserTransferAuthorityAccount gets the "userTransferAuthority" account.
func (inst *MercurialExchange) GetUserTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSourceTokenAccount sets the "sourceTokenAccount" account.
func (inst *MercurialExchange) SetSourceTokenAccount(sourceTokenAccount ag_solanago.PublicKey) *MercurialExchange {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(sourceTokenAccount).WRITE()
	return inst
}

// GetSourceTokenAccount gets the "sourceTokenAccount" account.
func (inst *MercurialExchange) GetSourceTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetDestinationTokenAccount sets the "destinationTokenAccount" account.
func (inst *MercurialExchange) SetDestinationTokenAccount(destinationTokenAccount ag_solanago.PublicKey) *MercurialExchange {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(destinationTokenAccount).WRITE()
	return inst
}

// GetDestinationTokenAccount gets the "destinationTokenAccount" account.
func (inst *MercurialExchange) GetDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst MercurialExchange) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MercurialExchange,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MercurialExchange) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MercurialExchange) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinimumOutAmount == nil {
			return errors.New("MinimumOutAmount parameter is not set")
		}
		if inst.PlatformFeeBps == nil {
			return errors.New("PlatformFeeBps parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SwapState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.DestinationTokenAccount is not set")
		}
	}
	return nil
}

func (inst *MercurialExchange) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MercurialExchange")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        InAmount (OPT)", inst.InAmount))
						paramsBranch.Child(ag_format.Param("MinimumOutAmount", *inst.MinimumOutAmount))
						paramsBranch.Child(ag_format.Param("  PlatformFeeBps", *inst.PlatformFeeBps))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            swapState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         tokenProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        poolAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("userTransferAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          sourceToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     destinationToken", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj MercurialExchange) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InAmount` param (optional):
	{
		if obj.InAmount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.InAmount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinimumOutAmount` param:
	err = encoder.Encode(obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeBps` param:
	err = encoder.Encode(obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MercurialExchange) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InAmount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.InAmount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinimumOutAmount`:
	err = decoder.Decode(&obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeBps`:
	err = decoder.Decode(&obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}

// NewMercurialExchangeInstruction declares a new MercurialExchange instruction with the provided parameters and accounts.
func NewMercurialExchangeInstruction(
	// Parameters:
	inAmount uint64,
	minimumOutAmount uint64,
	platformFeeBps uint8,
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	swapState ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	poolAuthority ag_solanago.PublicKey,
	userTransferAuthority ag_solanago.PublicKey,
	sourceTokenAccount ag_solanago.PublicKey,
	destinationTokenAccount ag_solanago.PublicKey) *MercurialExchange {
	return NewMercurialExchangeInstructionBuilder().
		SetInAmount(inAmount).
		SetMinimumOutAmount(minimumOutAmount).
		SetPlatformFeeBps(platformFeeBps).
		SetSwapProgramAccount(swapProgram).
		SetSwapStateAccount(swapState).
		SetTokenProgramAccount(tokenProgram).
		SetPoolAuthorityAccount(poolAuthority).
		SetUserTransferAuthorityAccount(userTransferAuthority).
		SetSourceTokenAccount(sourceTokenAccount).
		SetDestinationTokenAccount(destinationTokenAccount)
}
